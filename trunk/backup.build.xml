<project name="Jupiter" default="build">  
  <description>
  Build file for the Jupiter system for Eclipse IDE.
  CVS: $Id: build.xml,v 1.69 2005/06/02 00:09:55 takuyay Exp $
  </description>
  
  <property environment="env"/>
  
  <!-- Module and version information -->
  <property name="system.name" value="jupiter"/>
  <property name="system.vendor" value="Collaborative Software Development Laboratory"/>
  <property name="majorVersionNumber" value="3"/>
  <property name="minorVersionNumber" value="2"/>
  <property name="releaseVersionNumber" value="1"/>
  <property name="overviewFile" value="${basedir}/src/overview.html"/>
 
  <!-- HackyJupiter location -->
  <property name="hackyJupiter.home" value="../hackyJupiter"/>
  <property name="eclipse-home" value="C:/develop/eclipse"/>
  <property name="eclipse-test-plugin" value="org.eclipse.test_3.1.0"/>
  <property name="library-file" value="${eclipse-home}/plugins/${eclipse-test-plugin}/library.xml"/>
  
  <!-- Default value. Override on command line with -D -->
  <!-- local update server is http://localhost:8080/jupiter/Update/site.xml -->
  <property name="localhost" value="http://localhost:8080/"/>
  <property name="tomcat.admin.user" value="hackyAdmin"/>
  <property name="tomcat.admin.password" value="hackystat"/>

  <!-- Directories in CVS and in distributions -->
  <property name="src.dir" value="${basedir}/src"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="doc.dir" value="${basedir}/doc"/>
  <property name="etc.dir" value="${basedir}/etc"/>
  <!-- Directories created by various build targets -->
  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.src" value="${basedir}/build/src"/>
  <property name="build.classes" value="${basedir}/build/classes"/>
  <property name="reports.dir" value="${build.dir}/reports"/>
  <property name="javadoc.dir" value="${reports.dir}/api"/>
  <property name="java2html.dir" value="${reports.dir}/java2html"/>
  <property name="junit.dir" value="${reports.dir}/junit"/>
  <property name="dist.dir"  value="${reports.dir}/dist"/>
  <property name="bcml.dir"  value="${reports.dir}/bcml"/>
  <property name="locc.dir" value="${reports.dir}/locc"/>
  <property name="tmp.dir" value="${basedir}/tmp"/>
  <!--<property name="eclipse.jupiter.update.dir" value="${build.dir}/Update2"/>-->
  <property name="eclipse.jupiter.update.dir" value="${build.dir}/Update3"/>
  <property name="eclipse.original.update.dir" value="${lib.dir}/update"/>
  <property name="jupiter.dir" value="${build.dir}/Jupiter"/>
  <property name="jupiter.core.dir" value="${jupiter.dir}/Core"/>
  <!--<property name="jupiter.update.dir" value="${jupiter.dir}/Update2"/>-->
  <property name="jupiter.update.dir" value="${jupiter.dir}/Update3"/>
  <property name="csdl.jupiter.dir" value="S:/public_html/Tools/Jupiter"/>
  <!--
  <property name="csdl.jupiter.core.dir" value="${csdl.jupiter.dir}/Core"/>
  <property name="csdl.jupiter.update.dir" value="${csdl.jupiter.dir}/Update"/>
  -->
  
  <!-- Webapp related paths -->
  <property name="war.dir" location="${basedir}/build/war"/>
  <property name="war.web-inf.classes.dir" location="${basedir}/build/war/WEB-INF/classes"/>
  <property name="war.web-inf.lib.dir" location="${basedir}/build/war/WEB-INF/lib"/>
  <property name="war.meta-inf.dir" location="${basedir}/build/war/META-INF"/>
  
  <!-- JBlanket properties. Use -Djblanket.enable="on" on command line to override off setting. -->
  <!--
  <property name="jblanket.enable" value="on"/>
  <property name="user.home.jblanket.dir"  value="${user.home}/jblanket"/>
  -->
  
  <property name="jblanket.enable" value="off"/>
  <property name="user.home.jblanket.dir"  value="${user.home}/jblanket"/>
  
  <!-- Class path to be used in compile target-->
  <path id="compile.classpath">
    <pathelement location="${build.classes}"/>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <path id="bcml.classpath">
    <pathelement location="${build.classes}"/>
    <fileset dir="${lib.dir}">
       <include name="**/*.jar"/>
     </fileset>
   </path>

  <!-- *********************************************************************** -->
  <target name="eclipseProperties" if="eclipse.running"
          description="Sets compiler property for Eclipse IDE">
    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="init" depends="eclipseProperties"
    description="Initializes properties and tokens">
    
    <tstamp>
      <format property="TSTAMP" pattern="HH:mm:ss"/>
      <format property="DAYSTAMP" pattern="Mdd"/>
      <format property="MONTHSTAMP" pattern="MMMM d, yyyy"/>
    </tstamp>
    <!--<property name="version" value="${majorVersionNumber}.${minorVersionNumber}.${DAYSTAMP}"/>-->
    <property name="version" value="${majorVersionNumber}.${minorVersionNumber}.${releaseVersionNumber}"/>
    <property name="buildtime" value="${TODAY} ${TSTAMP}"/>
    <property name="dist.name" value="jupiter-${version}"/>
    <property name="jupiter.plugin.name" value="csdl.jupiter_${version}"/>
        
    <!-- Tokens for setting codeReview.version, codeReview.tstamp, and codeReview.buildtime -->
    <filter token="codeReview.version" value="${version}"/>
    <filter token="codeReview.tstamp" value="${TSTAMP}"/>
    <filter token="codeReview.buildtime" value="${buildtime}"/>
    
    <!-- Determines if we can do the updateCSDL -->
    <available property="csdl.jupiter.dir.available" file="${csdl.jupiter.dir}" />
  </target>
 
  <!-- *********************************************************************** -->
  <target name="clean"
    description="Delete build/, dist/, and misc other files.">
    
    <delete dir="${build.dir}"/>
    <delete dir="${user.home}/jblanket" quiet="yes"/>
    <delete>
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="**/*.java.*"/>
        <include name="**/*~"/>
        <include name="**/*.csv"/>
        <include name="**/*.log"/>
        <include name="**/.#*"/>
      </fileset>
    </delete>
  </target>

  <!-- *********************************************************************** -->
  <target name="prepare" depends="init"
    description="Creates build directories and copies source files to them.">
    
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.classes}"/>

    <!-- Now copy all changed source files into the build directory. -->
    <copy todir="${build.src}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.class" />
      </fileset>
    </copy>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="compile"
    description="Compiles source code for Eclipse.">
    
    <javac srcdir="${build.src}" destdir="${build.classes}" 
    	   source="1.4" target="1.4" debug="on">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.classes}">
      <fileset dir="${build.src}" includes="**/*.properties"/>      
    </copy>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="jblanketModify"
          description="Modify the system's byte code for the jblanket task."> 
          
    <taskdef name="jblanket" classname="csdl.jblanket.ant.JBlanketModifierTask"/>    
    <jblanket testgrammar="Test*.class"
              enable="${jblanket.enable}"
              excludeonelinemethods="true"
              verbose="on">
      <fileset dir="${build.classes}">
        <include name="**/*.class"/>
      </fileset>
    </jblanket>
  </target>
 
  <!-- *********************************************************************** -->
  <target name="jblanketReport"
         description="Generate a report on the JBlanket results.">
         
    <taskdef name="jblanketreport" classname="csdl.jblanket.ant.JBlanketReportTask"/>
    <jblanketreport excludeonelinemethods="true" 
                    enable="${jblanket.enable}">
    </jblanketreport>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="makeManifest" depends="init"
    description="Creates the manifest.mf file, replacing old one if present.">
    
    <manifest file="${build.dir}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Main-Class" value="${system.main.class}"/>
      <attribute name="Specification-Title" value="${system.name}"/>
      <attribute name="Specification-Vendor" value="${system.vendor}"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Implementation-Version" value="${buildtime}"/>
    </manifest>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="jar" depends="compile, makeManifest"
    description="Create juipters.jar file in build/lib dirs.">

    <jar jarfile="${build.dir}/jupiter.jar"
         basedir="${build.classes}"
         manifest="${build.dir}/MANIFEST.MF" />
  </target>
  
  <!-- *********************************************************************** -->
  <target name="buildPackage" depends="jar"
    description="Create the automatically update-able Eclipse Jupiter plug-in.">
    
    <echo message="Creating eclipse jupiter update-able jars."/>
    <property name="jupiter.zip" value="${jupiter.plugin.name}.zip"/>
    <property name="jupiter.jar" value="${jupiter.plugin.name}.jar"/> 
    <property name="eclipse.zip.dir" location="${eclipse.jupiter.update.dir}/${jupiter.plugin.name}"/>
    <property name="eclipse.plugins.dir" location="${eclipse.jupiter.update.dir}/plugins"/>
    <property name="eclipse.features.dir" location="${eclipse.jupiter.update.dir}/features"/>
    
    <!-- Copy the original update directory to the distribution update directory. -->
    <copy todir="${eclipse.jupiter.update.dir}" preservelastmodified="true">
       <fileset dir="${eclipse.original.update.dir}" includes="**/*"/>
    </copy>
    
    <!-- Copy the jupiter.jar and jdom.jar file to the plugin directory. -->
    <copy todir="${eclipse.plugins.dir}" preservelastmodified="true"
          file="${build.dir}/jupiter.jar"/>
    <copy todir="${eclipse.plugins.dir}" preservelastmodified="true">
      <fileset dir="${basedir}" includes="lib/jdom.jar,lib/icons/*.gif"/>
    </copy>

  	<copy todir="${eclipse.plugins.dir}" preservelastmodified="true">
      <fileset dir="${basedir}" includes="preference.xml,property.xml,META-INF/MANIFEST.MF,plugin.xml"/>
  	  <filterset begintoken="0." endtoken=".0">
        <filter token="3" value="${version}"/>
      </filterset>
  	</copy>	
          
    <!-- Replace the version token tag to the current date version.-->
    <replace dir="${eclipse.jupiter.update.dir}"
             includes="**/*.xml"
             token="@VERSION@"
             value="${version}"/>

    <!-- Create the plugins distribution zip file. -->
    <mkdir dir="${eclipse.zip.dir}"/>
    <copy todir="${eclipse.zip.dir}/plugins/${jupiter.plugin.name}" preservelastmodified="true">
         <fileset dir="${eclipse.plugins.dir}" includes="**/*"/>
    </copy>
    <copy todir="${eclipse.zip.dir}/features/${jupiter.plugin.name}" preservelastmodified="true">
         <fileset dir="${eclipse.features.dir}" includes="**/*"/>         
    </copy>
    <copy todir="${eclipse.zip.dir}" preservelastmodified="true">
         <fileset dir="${doc.dir}" includes="InstallationGuide.html,History.html,jupiter.css"/>         
    </copy>
    <replace dir="${eclipse.zip.dir}"
             includes="InstallationGuide.html">
             <replacefilter token="@PLUGIN_NAME@" value="${jupiter.plugin.name}"/>
    </replace>
    <replace dir="${eclipse.zip.dir}"
              includes="MANIFEST.MF">
              <replacefilter token="@VERSION@" value="${version}"/>
     </replace>
    <zip zipfile="${eclipse.jupiter.update.dir}/${jupiter.zip}"
         basedir="${eclipse.jupiter.update.dir}/${jupiter.plugin.name}"
         includes="**/*"/>
    
    <delete dir="${eclipse.zip.dir}"/>
    
    <!-- Create the plugins jar file. -->
    <zip zipfile="${eclipse.plugins.dir}/${jupiter.jar}"
         basedir="${eclipse.plugins.dir}"
         excludes="${jupiter.jar}" />
    <!-- Create the features jar file. -->
    <zip zipfile="${eclipse.features.dir}/${jupiter.jar}"
         basedir="${eclipse.features.dir}"
         excludes="${jupiter.jar}" />
    
    <!-- Deletes everything but jar files from subdirectories. -->
    <delete includeEmptyDirs="true">
      <fileset dir="${eclipse.plugins.dir}"
               excludes="${jupiter.jar}" />
      <fileset dir="${eclipse.features.dir}"
               excludes="${jupiter.jar}" />
    </delete>
  </target>
    
  <!-- *********************************************************************** -->
  <target name="build" depends="clean, checkstyle, buildPackage"
        description="Build packages, "/> 
        
  <!-- *********************************************************************** -->
  <target name="buildAllWithoutCoverage" depends="build, copyHtmlPages, dist, java2html, javadoc, locc"
        description="Build packages, and invoke dist, java2html, javadoc, locc, and bcml"/>
  <!--
  <target name="buildAllWithoutCoverage" depends="build, copyHtmlPages, dist, java2html, javadoc, locc, bcml"
        description="Build packages, and invoke dist, java2html, javadoc, locc, and bcml"/>
   -->   
        
  <!-- *********************************************************************** -->
  <target name="buildAll" depends="build, copyHtmlPages, junit, jblanket, dist, java2html, javadoc, locc, bcml"
        description="Build packages and invoke jblanket, test, dist, java2html, javadoc, locc, and bcml"/> 
        
        
  <!-- *********************************************************************** -->
  <target name="checkstyle" depends="prepare"
    description="Checks the style of the sources and reports issues.">
    <property name="checkstyle.version" value="4.2"/>
    <property name="checkstyle.jar" value="checkstyle-all-${checkstyle.version}.jar"/>
    <available file="${env.CHECKSTYLE_HOME}/${checkstyle.jar}" property="checkstyle.available"/>
    <fail unless="checkstyle.available" message="Error: CHECKSTYLE_HOME not set or ${env.CHECKSTYLE_HOME}/${checkstyle.jar} not found."/>
    <taskdef resource="checkstyletask.properties" classpath="${env.CHECKSTYLE_HOME}/${checkstyle.jar}" />
         
    <checkstyle config="${lib.dir}/checkstyle/checkstyle.xml"
                failOnViolation="off"
                failureProperty="checkstyle.failed">
      <fileset dir="${src.dir}" includes="**/*.java" />
      <formatter type="plain"/>
    </checkstyle>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="javadoc" depends="prepare"
    description="Creates the JavaDoc API documentation.">
    
    <mkdir dir="${javadoc.dir}"/>
    <javadoc packagenames="**.*"
             sourcepath="${build.src}"
             destdir="${javadoc.dir}"
             author="true"
             version="true"
             use="true"
             package="true"
             stylesheetfile="${lib.dir}/stylesheet.csdl.css"
             splitindex="true"
             overview="${overviewFile}"
             noindex="false"
             windowtitle="Jupiter Version ${version} API"
             doctitle="Jupiter Version ${version} API"
             locale="en_US">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>
  
  <!-- *********************************************************************** -->  
  <target name="java2html" depends="compile"
    description="Create a html version of source code.">
    
    <taskdef name="java2html" classname="csdl.ant.taskdefs.j2h" />
    
    <java2html destination="${java2html.dir}/"
         source="${build.src}"
         tab="2"
         margin="3"
         javadoc="http://www.javasoft.com/products/jdk/1.3/docs/api"
         name="Jupiter Version ${version}" />

    <concat destfile="${java2html.dir}/stylesheet.css" append="true">
      <fileset dir="${lib.dir}" includes="stylesheet.csdl.css"/>
    </concat>
  </target>

  <!-- *********************************************************************** -->
  <target name="copyHtmlPages" depends="prepare"
          description="Copy welcome.html and Jupiter.jpg to the build dir."> 
          
    <copy todir="${build.dir}">
      <fileset dir="${lib.dir}/csdl">
        <include name="Welcome.html"/>
      </fileset>
    </copy>

    <!-- Replace the version token tag to the current date version.-->
    <replace dir="${build.dir}"
             includes="Welcome.html">
             <replacefilter token="@VERSION@" value="${version}"/>
             <replacefilter token="@MONTH_STAMP@" value="${MONTHSTAMP}"/>
             <replacefilter token="@PLUGIN_NAME@" value="${jupiter.plugin.name}"/>
             <replacefilter token="@DISTRIBUTION_NAME@" value="${dist.name}"/>
    </replace>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="copyJblanket" depends="init" if="user.home.jblanket.dir"
          description="Copy jblanket results and reports to build/jblanket dir.">
          
    <property name="jbanket.dir" value="${build.dir}/jblanket"/>
    <mkdir dir="${jbanket.dir}"/>
    <copy todir="${jbanket.dir}">
      <fileset dir="${user.home.jblanket.dir}" includes="**/*"/>
    </copy>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="updateCSDLAll" depends="buildAll" if="csdl.jupiter.dir.available"
    description="Copy dist, java2html, javadoc, test, coverage, and doc files to CSDL Jupiter home page.">
    <antcall target="createWebSite"/>
    <copy todir="${csdl.jupiter.dir}">
      <fileset dir="${jupiter.dir}" includes="**/*"/>
    </copy>
  </target>

  <!-- *********************************************************************** -->
  <target name="installJupiter" depends="buildAll" if="${eclipse-home}"
    description="Copy dist, java2html, javadoc, test, coverage, and doc files to CSDL Jupiter home page.">
    <antcall target="createWebSite"/>
    <copy todir="${csdl.jupiter.dir}">
      <fileset dir="${jupiter.dir}" includes="**/*"/>
    </copy>
  </target>

  
  <!-- *********************************************************************** -->
  <target name="updateCSDL" depends="buildAllWithoutCoverage" if="csdl.jupiter.dir.available"
    description="Copy dist, java2html, javadoc, and doc files to CSDL Jupiter home page.">
    <antcall target="createWebSite"/>
    <copy todir="${csdl.jupiter.dir}">
      <fileset dir="${jupiter.dir}" includes="**/*"/>
    </copy>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="updateLocalhostAll" depends="checkTomcat, buildAll"
    description="Copy dist, java2html, javadoc, test, coverage, and doc files to localhost.">
    <antcall target="createWebSite"/>

    <antcall target="deploy"/>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="updateLocalhost" depends="checkTomcat, buildAllWithoutCoverage"
    description="Copy dist, java2html, javadoc, and doc files to localhost.">
    <antcall target="createWebSite"/>
    <antcall target="deploy"/>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="createWebSite"
          description="create web site in the build directory">
          
    <delete dir="${jupiter.core.dir}"/>
    <delete dir="${jupiter.update.dir}"/>
    <mkdir dir="${jupiter.core.dir}"/>
    <mkdir dir="${jupiter.update.dir}"/>
    
    <!-- Copy Update dir's files -->
    <copy todir="${jupiter.update.dir}">
      <fileset dir="${eclipse.jupiter.update.dir}" includes="**/*"/>
    </copy>
    
    <!-- Copy Core dir's files -->
    <copy todir="${jupiter.core.dir}">
      <fileset dir="${basedir}">
        <include name="doc/**"/>
        <include name="lib/stylesheet.csdl.css"/>
        <include name="README.html"/>
        <include name="build*.xml"/>
        <include name="*.bat"/>
        <include name="*.csh"/>
        <include name="*.sh"/>
      </fileset>
    </copy>
    
    <copy todir="${jupiter.core.dir}/build">
      <fileset dir="${reports.dir}"/>
    </copy>
      
    <!-- Copy files in CSDL jupiter root dir -->
    <copy todir="${jupiter.dir}">
     <fileset dir="${build.dir}">
       <include name="Welcome.html"/>
     </fileset>
    </copy>
  </target>

  <!-- *********************************************************************** -->
  <target name="dist" depends="init"
    description="Create a developer's distribution package with source, jar file, and documentation.">
    
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${tmp.dir}/${dist.name}" />
    <copy todir="${tmp.dir}/${dist.name}" >
      <fileset dir="${basedir}"
               excludes="**/CVS/*, **/*~, tmp/**, build/**" />
    </copy>
    <zip zipfile="${dist.dir}/${dist.name}.zip"
         basedir="${basedir}/tmp" />
    <delete dir="${tmp.dir}" />
  </target>

  <!-- *********************************************************************** -->
  <target name="junit" depends="init,checkstyle, compile"
    description="Run JUnit tests (all classes whose name starts with Test) and generate a report.">
    <!--
    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
    <taskdef name="junitreport" classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator" />
    <taskdef name="junitsensor" classname="org.hackystat.stdext.sensor.ant.junit.JUnitSensor" />
    -->
    
    
    <!-- First, clean the junit directory. -->
    <delete dir="${junit.dir}"/>
    <mkdir dir="${junit.dir}"/>

    <!-- Run the tests. -->
    <junit printsummary="withOutAndErr" fork="on">
      <!-- Need these class paths ! -->
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
      
      <formatter type="xml" />
      <batchtest todir="${junit.dir}">
        <fileset dir="${src.dir}">
          <include name="**/Test*.java" />
        </fileset>
      </batchtest>
    </junit>
    
    <echo message="Testing plugin related tests for at ${eclipse-home}"/>
    <!--<antcall target="pluginTestSuite"/>-->
    
    <!-- Generate a report on the results. -->
    <junitreport todir="${junit.dir}">
      <fileset dir="${junit.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.dir}" styledir="${etc.dir}/xsl"/>
    </junitreport>
    
    <!-- Delete the interim junit output file to avoid computer information exposure. -->
    <delete>
      <fileset dir="${junit.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
    </delete>
    
    <echo message="JUnit results in ${junit.dir}" />
    <!--<antcall target="sendTestData"/>-->

  </target>

  <!-- Unit tests that require plugin. -->
  <target name="pluginTestSuite" depends="buildPackage" unless="${jblanket.enable}">
    <copy todir="${eclipse-home}/plugins" overwrite="true">
       <fileset dir="${basedir}/lib/eclipse/plugins" includes="**/*"/>      
    </copy>
    <copy todir="${eclipse-home}/features" overwrite="true">
       <fileset dir="${basedir}/lib/eclipse/features" includes="**/*"/>      
    </copy>
    
    <delete dir="${eclipse-home}/features/${jupiter.plugin.name}" failonerror="no"/> 
    <delete dir="${eclipse-home}/plugins/${jupiter.plugin.name}" failonerror="no"/> 

    <unzip dest="${eclipse-home}/features/${jupiter.plugin.name}" 
           src="${eclipse.features.dir}/${jupiter.jar}"/>
    <unzip dest="${eclipse-home}/plugins/${jupiter.plugin.name}" 
           src="${eclipse.plugins.dir}/${jupiter.jar}"/>
      
    <echo message="${eclipse-home}"/>
    
    <delete dir="${junit.dir}/.metadata" failonerror="no"/>
    <delete dir="${junit.dir}/testJupiter*" failonerror="no"/>
    
    <ant target="ui-test" antfile="${library-file}" dir="${eclipse-home}">
      <property name="data-dir" value="${junit.dir}"/>
      <property name="plugin-name" value="csdl.jupiter"/>
      <property name="classname" value="csdl.jupiter.PluginSuiteTest"/>
      <property name="os" value="win32"/>
      <property name="ws" value="win32"/>
      <property name="arch" value="x86"/>
    </ant>
    
    <move todir="${junit.dir}">
      <fileset dir="${eclipse-home}" includes="TEST-csdl.jupiter*.xml"/>
    </move>
  </target>
    
  <!-- *********************************************************************** -->
  <target name="jblanket" depends="init"
          description="Run JBlanket and generate the report." 
          if="${jblanket.enable}">
    
    <antcall target="compile"/>
    <antcall target="jblanketModify"/>
    <antcall target="junit"/>
    <antcall target="jblanketReport"/>
    <antcall target="sendCoverageData"/>
    <antcall target="copyJblanket"/>
  </target>

  <!-- *********************************************************************** -->
  <target name="sendTestData" depends="init">
  <taskdef name="hacky-junit" classname="org.hackystat.stdext.sensor.ant.junit.JUnitSensor" />
    <hacky-junit>
      <fileset dir="${junit.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
    </hacky-junit>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="sendCoverageData" depends="init">
  <taskdef name="hacky-jblanket" classname="org.hackystat.stdext.sensor.ant.jblanket.JBlanketSensor" />
    <hacky-jblanket enable="${jblanket.enable}" verbose="on"/>
  </target>
  
  <!-- *********************************************************************** -->
  <!--   LOCC requires locc.jar and sensor.locc.jar in ant/lib.                                    -->
  <!-- *********************************************************************** -->
  <target name="checkLoccAvailable"
    description="Sets locc.available if the locc resource is found.">
    <available property="locc.available" classname="csdl.locc.tools.ant.LOCCTaskdef"/>
    <!--    
      <available property="locc.sensor.available" classname="org.hackystat.stdext.sensor.ant.locc.LoccSensor"/> 
    -->
  </target>

  <target name="locc" depends="checkLoccAvailable" if="locc.available"
    description="Computes the size of the source code.">
    <taskdef name="locc" classname="csdl.locc.tools.ant.LOCCTaskdef" />

    <fail message="src.dir property not defined." unless="src.dir"/>
    <mkdir dir="${locc.dir}"/>
    
    <locc sizetype="javaline"
          outfile="size.xml"
          outdir="${locc.dir}"
          failOnError="false">
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </locc>

    <!-- Send the results to Hackystat if sensor available and data sending enabled. -->
    <antcall target="sendLoccDataToHackystat"/>
  </target>

  <target name="checkLoccSensorAvailable"
    description="Sets locc.sensor.available if the sensor is installed in Ant and is enabled in hackystat.properties.">
    <condition property="locc.sensor.available">
      <and>
        <available classname="org.hackystat.stdext.sensor.ant.locc.LoccSensor"/>
        <!-- Uncomment 'locc.sensor.enabled=true' in hackystat.properties to enable. -->
        <isset property="locc.sensor.enabled"/>
      </and>
    </condition>
  </target>
  
  <target name="sendLoccDataToHackystat" depends="checkLoccSensorAvailable" if="locc.sensor.available">
    <taskdef name="hacky-locc" classname="org.hackystat.stdext.sensor.ant.locc.LoccSensor" />
    <hacky-locc>
      <fileset dir="${locc.dir}">
        <include name="size.xml"/>
      </fileset>
    </hacky-locc>
  </target>
           
  
  <!-- *********************************************************************** -->
  <!--
  <target name="locc" depends="compile"
    description="Compute the total size of the source code using LOCC.">
    <taskdef name="locc" classname="csdl.locc.tools.ant.LOCCTaskdef" />
    <mkdir dir="${locc.dir}" />
    <echo message="Total size:"/>
    <locc sizetype="javaline"
          outformat="csv"
          outfile="${locc.dir}/size.csv">
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </locc>
    <echo message="Non-test code size:"/>
    <locc sizetype="javaline"
          outformat="csv"
          outfile="${locc.dir}/sizeNonTestCode.csv">
      <fileset dir="${src.dir}" includes="**/*.java" excludes="**/Test*.java"/>
    </locc>
    <echo message="Test code size:"/>
    <locc sizetype="javaline"
          outformat="csv"
          outfile="${locc.dir}/sizeTestCode.csv">
      <fileset dir="${src.dir}" includes="**/Test*.java"/>
    </locc>
    <locc sizetype="javaline"
          outfile="size.xml"
          outdir="${locc.dir}">
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </locc>
    -->
    
    <!-- Send the results to Hackystat if sensor available and data sending enabled. -->
  <!--
    <antcall target="sendLoccDataToHackystat"/>
  </target>
  -->
  <!--
  <target name="sendLoccDataToHackystat">
    <taskdef name="hacky-locc" classname="org.hackystat.stdext.sensor.ant.locc.LoccSensor" />
    <hacky-locc>
      <fileset dir="${locc.dir}">
        <include name="size.xml"/>
      </fileset>
    </hacky-locc>
  </target>
  
  -->
  
  <!-- *********************************************************************** -->       
  <target name="bcml" depends="compile"
        description="Runs BCML to generate source code metrics, then sends results to Hackystat.">
    <!-- Temporary disable BCML report because BCML cannot work to Jupiter for now
         Hongbing Kou  September 25, 2005
    <taskdef name="bcml" classname="csdl.bcml.ui.ant.BcmlTask"/>
    <taskdef name="bcmlreport" classname="csdl.bcml.ui.ant.BcmlXmlReportTask" /> 
    <taskdef name="hacky-bcml" classname="org.hackystat.stdext.sensor.ant.bcml.BcmlSensor"/>

    <bcml todir="${bcml.dir}"
          verbose="off"
          fork="on"
          aggregatefile="bcml-all.xml">
      <classpath refid="bcml.classpath"/>
    
      <fileset dir="${build.classes}">
        <include name="**/*.class"/>
      </fileset>
    </bcml>
    
    <bcmlreport todir="${bcml.dir}"
                dir="${bcml.dir}"
                aggregatefile="bcml-all.xml"/>
    <echo message="BCML results in ${bcml.dir}/index.html" />

    <hacky-bcml verbose="on">
      <fileset dir="${bcml.dir}">
        <include name="bcml-all.xml"/>
      </fileset>
    </hacky-bcml>
    -->
  </target>
  
  <!-- *********************************************************************** -->
  <target name="checkTomcat" depends="init"
    description="Checks to make sure that Tomcat is running and the manager is accessable.">

    <fail message="Undefined CATALINA_HOME" unless="env.CATALINA_HOME"/>
    <!-- First ensure that Tomcat is actually up. -->
    <condition property="tomcat.ok">
      <http url="${localhost}"/>
    </condition>
    <fail unless="tomcat.ok" message="Tomcat does not appear to be running on ${localhost}"/>

    <!-- Tomcat is up, so now check that we have access to the manager. -->
    <get src="${localhost}/manager/list"
         dest="list-results.tmp"
         username="${tomcat.admin.user}"
         password="${tomcat.admin.password}"/>
    <loadfile property="list.results" srcFile="list-results.tmp"/>
    <condition property="tomcat.manager.ok">
      <contains string="${list.results}" substring="OK"/>
    </condition>
    <fail unless="tomcat.manager.ok" message="Tomcat manager not accessable on ${localhost}"/>
    <delete file="list-results.tmp"/>
    <echo message="Tomcat and its management interface contacted successfully."/>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="deploy" depends="checkTomcat, undeploy" if="jupiter.dir"
    description="Tries to install the jupiter update site on Tomcat.">
    <property name="deploy.url.path"  value="file://${build.dir}/Jupiter"/>
    <property name="deploy.params"  value="path=/Jupiter&amp;war=${deploy.url.path}"/>
    <property name="deploy.install.url"  value="${localhost}/manager/install"/>
    <mkdir dir="${build.dir}/WEB-INF"/>
    <get src="${deploy.install.url}?${deploy.params}"
         dest="deploy-results.tmp"
         username="${tomcat.admin.user}"
         password="${tomcat.admin.password}"/>
    <loadfile property="deploy.results" srcFile="deploy-results.tmp"/>
    <echo>${deploy.results}</echo>
    <delete file="deploy-results.tmp"/>
  </target>
  
  <!-- *********************************************************************** -->
  <target name="undeploy" depends="init"
    description="Tries to remove the jupiter update site from Tomcat.">
    <property name="deploy.remove.url"  value="${localhost}/manager/remove"/>
    <delete dir="${build.dir}/WEB-INF"/>
    <get src="${deploy.remove.url}?path=/Jupiter  "
         dest="undeploy-results.tmp"
         username="${tomcat.admin.user}"
         password="${tomcat.admin.password}"/>
    <loadfile property="undeploy.results" srcFile="undeploy-results.tmp"/>
    <echo>${undeploy.results}</echo>
    <delete file="undeploy-results.tmp"/>
  </target>
  
  <!-- *********************************************************************** --> 
  <target name="updateHackyJupiter" depends="build"
    description="Copy jupiter.jar file to the hackyJupiter/lib/jar directory.">
    <copy todir="${hackyJupiter.home}/lib/jar" preservelastmodified="true">
      <fileset file="${build.dir}/jupiter.jar" />
    </copy> 
  </target>
  
  <!-- *********************************************************************** -->
  <!--   Ant library updates                                                   -->
  <!-- *********************************************************************** -->
  <target name="updateAntLib"
    description="Copies jar files implementing Ant extensions for Hackystat to the ant.home/lib directory. ">
    <copy todir="${ant.home}/lib" preservelastmodified="true">
      <fileset dir="${basedir}/lib/ant" includes="*.jar"/>
      <!--
      <fileset dir="${env.CATALINA_HOME}/server/lib" includes="catalina-ant.jar"/>
      -->
    </copy>
  </target>
  
  <!-- *********************************************************************** --> 
  <target name="cruisecontrol" description="Invokes the cruise control task.">
    <ant target="buildAllWithoutCoverage"/>
  </target>
</project>